!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Alloc	utility/blob.cpp	/^void Blob<Dtype>::Alloc()$/;"	f	class:feather::Blob
Alloc	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Alloc()$/;"	f	class:CommonMemPool
Alloc	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Alloc(size_t size_byte)$/;"	f	class:CommonMemPool
Alloc	utility/mempool.cpp	/^bool PrivateMemPool<PTR_TYPE>::Alloc(PTR_TYPE ** ptr, size_t size_byte)$/;"	f	class:PrivateMemPool
BasicConv_hpp	ncnn/ConvKernels.hpp	10;"	d
Blob	utility/blob.h	/^        Blob()$/;"	f	class:feather::Blob
Blob	utility/blob.h	/^        explicit Blob(Dtype* data, const size_t num, const size_t channels, const size_t height, const size_t width)$/;"	f	class:feather::Blob
Blob	utility/blob.h	/^        explicit Blob(Dtype* data, size_t num, size_t channels, size_t height, size_t width, std::string name)$/;"	f	class:feather::Blob
Blob	utility/blob.h	/^        explicit Blob(const size_t num, const size_t channels, const size_t height, const size_t width)$/;"	f	class:feather::Blob
Blob	utility/blob.h	/^class Blob$/;"	c	namespace:feather
CXX	Makefile	/^CXX = g++$/;"	m
CXX_FLAGS	Makefile	/^CXX_FLAGS = -std=c++11 $(DEFS) -Wno-format -I$(PWD) -O3 -fopenmp$/;"	m
CXX_SRC	Makefile	/^CXX_SRC=.\/winoF63\/winoF63.cpp .\/utility\/helper.cpp .\/utility\/common.cpp .\/winoF63\/TensorGEMM.cpp ConvTest.cpp .\/ncnn\/ConvKernels.cpp$/;"	m
CommonMemPool	utility/mempool.h	/^        CommonMemPool(): common_size(0), common_memory(NULL) {}$/;"	f	class:CommonMemPool
CommonMemPool	utility/mempool.h	/^class CommonMemPool$/;"	c
ConvLayer	conv_layer.h	/^        ConvLayer(float *input, float *kernel, float *biasw, size_t ic, size_t ih, size_t iw, size_t oc, size_t kh=3, size_t kw=3, size_t sh=1, size_t sw=1, size_t pad_left=1, size_t pad_right=1, size_t pad_top=1, size_t pad_bottom=1, size_t g=1, bool bias=0)$/;"	f	class:ConvLayer
ConvLayer	conv_layer.h	/^class ConvLayer$/;"	c
ConvWinogradLayer	convLayer/conv_winograd_layer.h	/^        ConvWinogradLayer(const LayerParameter *layer_param, const RuntimeParameter<float>* rt_param)$/;"	f	class:feather::ConvWinogradLayer
ConvWinogradLayer	convLayer/conv_winograd_layer.h	/^class ConvWinogradLayer : public ConvLayer$/;"	c	namespace:feather
ConvWinogradLayer	convLayer/naiveConv.h	/^class ConvWinogradLayer : public ConvLayer$/;"	c
Copy	utility/blob.h	/^        void Copy(const Blob<Dtype>* p_blob)$/;"	f	class:feather::Blob
CopyData	utility/blob.h	/^        void CopyData(const Dtype* data)$/;"	f	class:feather::Blob
CopyShape	utility/blob.h	/^        void CopyShape(const Blob<Dtype>* p_blob)$/;"	f	class:feather::Blob
EXEC	Makefile	/^EXEC=winograd_dev$/;"	m
Forward	convLayer/conv_winograd_layer.h	/^        int Forward()$/;"	f	class:feather::ConvWinogradLayer
Forward	convLayer/naiveConv.h	/^    int Forward()$/;"	f	class:ConvWinogradLayer
Forward	conv_layer.h	/^        virtual int Forward()$/;"	f	class:ConvLayer
ForwardReshape	convLayer/conv_winograd_layer.h	/^        virtual int ForwardReshape()$/;"	f	class:feather::ConvWinogradLayer
Free	utility/blob.cpp	/^void Blob<Dtype>::Free()$/;"	f	class:feather::Blob
Free	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Free()$/;"	f	class:CommonMemPool
Free	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Free(size_t id)$/;"	f	class:CommonMemPool
Free	utility/mempool.cpp	/^bool PrivateMemPool<PTR_TYPE>::Free(PTR_TYPE ** ptr)$/;"	f	class:PrivateMemPool
FreeAll	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::FreeAll()$/;"	f	class:CommonMemPool
FreeAll	utility/mempool.cpp	/^bool PrivateMemPool<PTR_TYPE>::FreeAll()$/;"	f	class:PrivateMemPool
Fuse	convLayer/conv_winograd_layer.h	/^        int Fuse(Layer *next_layer)$/;"	f	class:feather::ConvWinogradLayer
GetPtr	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::GetPtr(PTR_TYPE ** ptr)$/;"	f	class:CommonMemPool
GetPtr	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::GetPtr(PTR_TYPE ** ptr, size_t id)$/;"	f	class:CommonMemPool
GetSize	utility/mempool.cpp	/^bool PrivateMemPool<PTR_TYPE>::GetSize(PTR_TYPE * ptr, size_t * size_byte)$/;"	f	class:PrivateMemPool
Init	convLayer/conv_winograd_layer.h	/^        int Init()$/;"	f	class:feather::ConvWinogradLayer
Init	convLayer/naiveConv.h	/^    int Init()$/;"	f	class:ConvWinogradLayer
Init	conv_layer.h	/^        virtual int Init()$/;"	f	class:ConvLayer
LD_FLAGS	Makefile	/^LD_FLAGS= -pie -pthread -std=c++11 -fopenmp$/;"	m
LOGD	utility/helper.h	23;"	d
LOGD	utility/helper.h	28;"	d
LOGE	utility/helper.h	24;"	d
LOGE	utility/helper.h	29;"	d
LOGI	utility/helper.h	22;"	d
LOGI	utility/helper.h	27;"	d
Layer	layer.h	/^class Layer$/;"	c	namespace:feather
MEMPOOL_CHECK_RETURN	utility/mempool.h	20;"	d
OBJ	Makefile	/^OBJ = $(patsubst %.cpp, $(OBJ_DIR)\/%.cpp.o, $(CXX_SRC))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR=.\/obj$/;"	m
PrintBlobInfo	utility/blob.h	/^        void PrintBlobInfo() const$/;"	f	class:feather::Blob
PrintStats	utility/mempool.cpp	/^void CommonMemPool<PTR_TYPE>::PrintStats()$/;"	f	class:CommonMemPool
PrintStats	utility/mempool.cpp	/^void PrivateMemPool<PTR_TYPE>::PrintStats()$/;"	f	class:PrivateMemPool
PrivateMemPool	utility/mempool.cpp	/^PrivateMemPool<PTR_TYPE>::PrivateMemPool()$/;"	f	class:PrivateMemPool
PrivateMemPool	utility/mempool.h	/^class PrivateMemPool$/;"	c
Realloc	utility/blob.cpp	/^void Blob<Dtype>::Realloc(size_t elem_size)$/;"	f	class:feather::Blob
Request	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Request(size_t size_byte)$/;"	f	class:CommonMemPool
Request	utility/mempool.cpp	/^bool CommonMemPool<PTR_TYPE>::Request(size_t size_byte, size_t id)$/;"	f	class:CommonMemPool
ReshapeWithRealloc	utility/blob.cpp	/^void Blob<Dtype>::ReshapeWithRealloc(const Blob<Dtype> *p_blob)$/;"	f	class:feather::Blob
ReshapeWithRealloc	utility/blob.cpp	/^void Blob<Dtype>::ReshapeWithRealloc(int num, int channels, int height, int width)$/;"	f	class:feather::Blob
StringTool	utility/common.h	/^class StringTool$/;"	c
TCNN_MEMORY_POOL_H_	utility/mempool.h	16;"	d
Tensor	tensor.h	/^class Tensor$/;"	c
TensorGEMMInnerKernel2x10x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel2x10x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel2x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel2x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel3x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel3x2x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x2x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel3x3x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x3x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel3x4x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x4x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel3x5x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x5x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel3x6x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x6x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel3x7x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel3x7x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel4x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel4x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel4x2x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel4x2x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel4x3x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel4x3x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel4x4x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel4x4x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel4x5x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel4x5x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel5x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel5x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel5x2x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel5x2x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel5x3x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel5x3x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel5x4x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel5x4x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride)$/;"	f
TensorGEMMInnerKernel6x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel6x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel6x2x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel6x2x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel6x3x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel6x3x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel6x4x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel6x4x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel6x5x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel6x5x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x1x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x1x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x2x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x2x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x3x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x3x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x4x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x4x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x5x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x5x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMMInnerKernel7x6x4	winoF63/TensorGEMM.cpp	/^void TensorGEMMInnerKernel7x6x4(float* WTp, const float* UTp, float* vp, int inChannels, int wStride) {$/;"	f
TensorGEMM_H_	winoF63/TensorGEMM.h	2;"	d
Timer	utility/helper.h	/^        Timer() {accumulate=0;}$/;"	f	class:Timer
Timer	utility/helper.h	/^class Timer$/;"	c
Tuning	convLayer/naiveConv.h	/^    int Tuning()$/;"	f	class:ConvWinogradLayer
Tuning	conv_layer.h	/^	virtual int Tuning()$/;"	f	class:ConvLayer
UT	convLayer/conv_winograd_layer.h	/^        float* UT;$/;"	m	class:feather::ConvWinogradLayer
WINOF63_H_	winoF63/winoF63.h	2;"	d
_bottom	layer.h	/^        std::vector<std::string> _bottom;$/;"	m	class:feather::Layer
_bottom_blobs	layer.h	/^        std::map<std::string, const Blob<float>*> _bottom_blobs; \/\/We don't want to do computation inplace.$/;"	m	class:feather::Layer
_channels	utility/blob.h	/^        size_t _channels;$/;"	m	class:feather::Blob
_data	utility/blob.h	/^        Dtype* _data;$/;"	m	class:feather::Blob
_fusible	layer.h	/^        bool _fusible;$/;"	m	class:feather::Layer
_height	utility/blob.h	/^        size_t _height;$/;"	m	class:feather::Blob
_inplace	layer.h	/^        bool _inplace;$/;"	m	class:feather::Layer
_mm_free	utility/common.cpp	/^void _mm_free(void* ptr)$/;"	f
_mm_malloc	utility/common.cpp	/^void* _mm_malloc(size_t sz, size_t align)$/;"	f
_name	layer.h	/^        std::string _name;$/;"	m	class:feather::Layer
_name	utility/blob.h	/^        std::string _name;$/;"	m	class:feather::Blob
_num	utility/blob.h	/^        size_t _num;$/;"	m	class:feather::Blob
_top	layer.h	/^        std::vector<std::string> _top;$/;"	m	class:feather::Layer
_top_blobs	layer.h	/^        std::map<std::string, Blob<float>*> _top_blobs;$/;"	m	class:feather::Layer
_type	layer.h	/^        std::string _type;$/;"	m	class:feather::Layer
_weight_blobs	layer.h	/^        std::vector<Blob<float>*> _weight_blobs;$/;"	m	class:feather::Layer
_width	utility/blob.h	/^        size_t _width;$/;"	m	class:feather::Blob
accumBench	utility/helper.cpp	/^void Timer::accumBench()$/;"	f	class:Timer
accumulate	utility/helper.h	/^        double accumulate;$/;"	m	class:Timer
bias_data	conv_layer.h	/^        float *bias_data;$/;"	m	class:ConvLayer
bias_term	conv_layer.h	/^        bool   bias_term;$/;"	m	class:ConvLayer
bottom	ncnn/ConvKernels.hpp	/^    int bottom;$/;"	m	struct:nnp_padding
channels	utility/blob.h	/^        size_t channels() const$/;"	f	class:feather::Blob
common_memory	utility/mempool.h	/^        PTR_TYPE * common_memory;$/;"	m	class:CommonMemPool
common_mempool	layer.h	/^        CommonMemPool<float>    *common_mempool;$/;"	m	class:feather::Layer
common_ptr_map	utility/mempool.h	/^        std::map<size_t, PTR_TYPE *> common_ptr_map;$/;"	m	class:CommonMemPool
common_size	utility/mempool.h	/^        size_t common_size;$/;"	m	class:CommonMemPool
common_size_map	utility/mempool.h	/^        std::map<size_t, size_t> common_size_map;$/;"	m	class:CommonMemPool
conv3x3s1_neon	ncnn/ConvKernels.cpp	/^void conv3x3s1_neon(float *rawInput, int input_channels, struct nnp_size inputDim,$/;"	f
data	utility/blob.h	/^        Dtype* data() const$/;"	f	class:feather::Blob
data_size	utility/blob.h	/^        size_t data_size() const$/;"	f	class:feather::Blob
diff	utility/helper.cpp	/^float diff(float* arr1, float* arr2, int M, int N)$/;"	f
diff	utility/helper.cpp	/^float diff(float* arr1, float* arr2, int len)$/;"	f
endBench	utility/helper.cpp	/^void Timer::endBench(const char* comment)$/;"	f	class:Timer
endBench	utility/helper.cpp	/^void Timer::endBench(const char* comment, double fold)$/;"	f	class:Timer
ext_pad_h	convLayer/conv_winograd_layer.h	/^        size_t ext_pad_h;$/;"	m	class:feather::ConvWinogradLayer
ext_pad_w	convLayer/conv_winograd_layer.h	/^        size_t ext_pad_w;$/;"	m	class:feather::ConvWinogradLayer
extractMatrix_4tile_8x8	winoF63/winoF63.cpp	/^void extractMatrix_4tile_8x8(float *inputBlock, float *testInput, int ic, int tile, int inputHeight, int inputWidth)$/;"	f
feather	convLayer/conv_winograd_layer.h	/^namespace feather$/;"	n
feather	layer.h	/^namespace feather$/;"	n
feather	utility/blob.cpp	/^namespace feather$/;"	n	file:
feather	utility/blob.h	/^namespace feather$/;"	n
fillTestInput	ConvTest.cpp	/^void fillTestInput(float* target, int inChannels, nnp_size inputDim){$/;"	f
fillTestKernel	ConvTest.cpp	/^void fillTestKernel(float* target, int inChannels, int outChannels, nnp_size kernelDim){$/;"	f
fuse_relu	convLayer/conv_winograd_layer.h	/^        bool fuse_relu;$/;"	m	class:feather::ConvWinogradLayer
group	conv_layer.h	/^        size_t group;$/;"	m	class:ConvLayer
height	ncnn/ConvKernels.hpp	/^    int height;$/;"	m	struct:nnp_size
height	utility/blob.h	/^        size_t height() const$/;"	f	class:feather::Blob
input	convLayer/conv_winograd_layer.h	/^        float* input;$/;"	m	class:feather::ConvWinogradLayer
inputTransform4x8x8	winoF63/winoF63.cpp	/^void inputTransform4x8x8(float *output, float* input)$/;"	f
inputTransform8x8	winoF63/winoF63.cpp	/^void inputTransform8x8(float *output, float *input)$/;"	f
input_channels	conv_layer.h	/^        size_t input_channels;$/;"	m	class:ConvLayer
input_data	conv_layer.h	/^	float *input_data;$/;"	m	class:ConvLayer
input_height	conv_layer.h	/^        size_t input_height;$/;"	m	class:ConvLayer
input_transform	winoF63/winoF63.cpp	/^static inline void input_transform($/;"	f	file:
input_width	conv_layer.h	/^        size_t input_width;$/;"	m	class:ConvLayer
kernelTransform4x8x8	winoF63/winoF63.cpp	/^void kernelTransform4x8x8(float *kernelBlock, float *kernel, int ldk)$/;"	f
kernelTransform8x8	winoF63/winoF63.cpp	/^void kernelTransform8x8(float *kernelBlock, float *kernel)$/;"	f
kernel_data	conv_layer.h	/^        float *kernel_data;$/;"	m	class:ConvLayer
kernel_height	conv_layer.h	/^        size_t kernel_height;$/;"	m	class:ConvLayer
kernel_width	conv_layer.h	/^        size_t kernel_width;$/;"	m	class:ConvLayer
left	ncnn/ConvKernels.hpp	/^    int left;$/;"	m	struct:nnp_padding
main	ConvTest.cpp	/^int main(int argc, char* argv[]){$/;"	f
min	utility/common.cpp	/^int min(int a, int b)$/;"	f
naive_gemmtemp	winoF63/winoF63.cpp	/^void naive_gemmtemp(int M, int N, int L, float *A, float *B, float *C)$/;"	f
name	utility/blob.h	/^        std::string name()$/;"	f	class:feather::Blob
neon_transpose4x4_inplace_f32_cpp	winoF63/winoF63.cpp	/^static inline void neon_transpose4x4_inplace_f32_cpp($/;"	f	file:
nnp_padding	ncnn/ConvKernels.hpp	/^struct nnp_padding {$/;"	s
nnp_size	ncnn/ConvKernels.hpp	/^struct nnp_size {$/;"	s
num	utility/blob.h	/^        size_t num() const$/;"	f	class:feather::Blob
num_threads	conv_layer.h	/^	int    num_threads;$/;"	m	class:ConvLayer
num_threads	layer.h	/^        size_t num_threads;$/;"	m	class:feather::Layer
offlineKernelTransform	winoF63/winoF63.cpp	/^void offlineKernelTransform(float *offlineKernel, float* testKernel, int outputChannels, int inputChannels, int ocBlock, int ocRegBlock)$/;"	f
output	convLayer/conv_winograd_layer.h	/^        float* output;$/;"	m	class:feather::ConvWinogradLayer
outputTransform4x8x8	winoF63/winoF63.cpp	/^void outputTransform4x8x8(float *out, float *output)$/;"	f
output_channels	conv_layer.h	/^        size_t output_channels;$/;"	m	class:ConvLayer
output_data	conv_layer.h	/^	float *output_data;$/;"	m	class:ConvLayer
output_height	conv_layer.h	/^        size_t output_height;$/;"	m	class:ConvLayer
output_width	conv_layer.h	/^        size_t output_width;$/;"	m	class:ConvLayer
padding_bottom	conv_layer.h	/^        size_t padding_bottom;$/;"	m	class:ConvLayer
padding_left	conv_layer.h	/^        size_t padding_left;$/;"	m	class:ConvLayer
padding_right	conv_layer.h	/^        size_t padding_right;$/;"	m	class:ConvLayer
padding_top	conv_layer.h	/^        size_t padding_top;$/;"	m	class:ConvLayer
printBench	utility/helper.cpp	/^void Timer::printBench(const char* comment, int fold)$/;"	f	class:Timer
printMatrix	ConvTest.cpp	/^void printMatrix(float* matrix, int row, int col)$/;"	f
printRegisters	winoF63/winoF63.cpp	/^void printRegisters(float32x4_t l0, float32x4_t r0, float32x4_t l1, float32x4_t r1, float32x4_t l2, float32x4_t r2, float32x4_t l3, float32x4_t r3,$/;"	f
printTensor	winoF63/winoF63.cpp	/^void printTensor(const float* matrix, int row, int col)$/;"	f
print_arr	utility/helper.cpp	/^void print_arr(float* vp)$/;"	f
print_floats	utility/helper.cpp	/^void print_floats(const float* arr, const int dimX, const int dimY)$/;"	f
print_floats	utility/helper.cpp	/^void print_floats(const float* arr, const int len)$/;"	f
print_floats	winoF63/TensorGEMM.cpp	/^void print_floats(float* arr, const int len)$/;"	f
print_vec	utility/helper.cpp	/^void print_vec(float32x4_t* vp)$/;"	f
print_vec	utility/helper.cpp	/^void print_vec(float32x4_t* vp, const char* comment)$/;"	f
print_vec2	utility/helper.cpp	/^void print_vec2(float32x4_t* vp)$/;"	f
print_vec3	utility/helper.cpp	/^void print_vec3(float32x4_t* vp)$/;"	f
private_map	utility/mempool.h	/^        std::map<PTR_TYPE *, size_t> private_map;$/;"	m	class:PrivateMemPool
private_mempool	layer.h	/^        PrivateMemPool<float>   private_mempool;$/;"	m	class:feather::Layer
retransformKernel	winoF63/winoF63.cpp	/^void retransformKernel(float* kernel, int outputChannels, int inputChannels, int ocBlock)$/;"	f
retransformKernel2	winoF63/winoF63.cpp	/^void retransformKernel2(float* kernel, int outputChannels, int inputChannels, int ocBlock, int icBlock, int ocRegBlock)$/;"	f
right	ncnn/ConvKernels.hpp	/^    int right;$/;"	m	struct:nnp_padding
start	utility/helper.h	/^        timespec start, stop;$/;"	m	class:Timer
startBench	utility/helper.cpp	/^void Timer::startBench()$/;"	f	class:Timer
stop	utility/helper.h	/^        timespec start, stop;$/;"	m	class:Timer
stride_height	conv_layer.h	/^        size_t stride_height;$/;"	m	class:ConvLayer
stride_width	conv_layer.h	/^        size_t stride_width;$/;"	m	class:ConvLayer
top	ncnn/ConvKernels.hpp	/^    int top;$/;"	m	struct:nnp_padding
transposetemp	winoF63/winoF63.cpp	/^void transposetemp(size_t m, size_t n, float *in, float *out) \/\/  A[m][n] -> A[n][m]$/;"	f
vfmaq_f32	utility/helper.h	/^static inline float32x4_t vfmaq_f32(float32x4_t _s, float32x4_t _a, float32x4_t _b)$/;"	f
vfmaq_laneq_f32	utility/helper.h	/^static inline float32x4_t vfmaq_laneq_f32(float32x4_t _s, float32x4_t _a, float32x4_t _b, int lane)$/;"	f
width	ncnn/ConvKernels.hpp	/^    int width;$/;"	m	struct:nnp_size
width	utility/blob.h	/^        size_t width() const$/;"	f	class:feather::Blob
winoF63	winoF63/winoF63.cpp	/^int winoF63(float *baseResult, float *testInput, const float *testKernel, int inputChannels, int outputChannels, int inputHeight, int inputWidth, int padWidth, int padHeight, int strideWidth, int strideHeight, int tileBlock, float *buf, int ocBlock, float *kernelBuf, int icBlock, float *inputBuf, int tileRegBlock, int ocRegBlock, bool enableOffKernel, int num_threads)$/;"	f
winoF63_naive	winoF63/winoF63.cpp	/^int winoF63_naive(float *baseResult, float *testInput, float *testKernel, int inputChannels, int outputChannels, int inputHeight, int inputWidth, int padWidth, int padHeight, int num_threads)$/;"	f
winograd_f6k3_kernel_transform	winoF63/winoF63.cpp	/^static inline void winograd_f6k3_kernel_transform($/;"	f	file:
winograd_f6k3_output_transform_inplace	winoF63/winoF63.cpp	/^static inline void winograd_f6k3_output_transform_inplace($/;"	f	file:
winograd_out_type	convLayer/conv_winograd_layer.h	/^        WinogradOutType winograd_out_type;$/;"	m	class:feather::ConvWinogradLayer
~Blob	utility/blob.h	/^        ~Blob()$/;"	f	class:feather::Blob
~CommonMemPool	utility/mempool.cpp	/^CommonMemPool<PTR_TYPE>::~CommonMemPool()$/;"	f	class:CommonMemPool
~PrivateMemPool	utility/mempool.cpp	/^PrivateMemPool<PTR_TYPE>::~PrivateMemPool()$/;"	f	class:PrivateMemPool
~Timer	utility/helper.h	/^        virtual ~Timer() {}$/;"	f	class:Timer
